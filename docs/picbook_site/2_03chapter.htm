<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<html><head><title>PIC microcontrollers : chapter 2 - Microcontroller PIC16F84</title>
<body bgcolor="#ffffff">
<div align="center">
<center>
<table background="2_03chapter_files/grid.gif" border="0" bordercolor="#111111" cellpadding="4" cellspacing="0" style="BORDER-COLLAPSE: collapse" width="760">
<tbody>
<tr>
<td width="100%">
<p align="center"><b><font color="#000080" face="Verdana" size="4">2.2 
      Reset</font></b></p>
<p><font face="Verdana" size="2">Reset is used for putting the microcontroller 
      into a 'known' condition. That practically means that microcontroller can 
      behave rather inaccurately under certain undesirable conditions. In order 
      to continue its proper functioning it has to be reset, meaning all 
      registers would be placed in a starting position. Reset is not only used 
      when microcontroller doesn't behave the way we want it to, but can also be 
      used when trying out a device as an interrupt in program execution, or to 
      get a microcontroller ready when loading a program.</font></p>
<table border="0" cellpadding="0" cellspacing="0" width="753">
<tbody>
<tr>
<td width="350"><font face="Verdana" size="2">In order to prevent from 
            bringing a logical zero to MCLR pin accidentally (line above it 
            means that reset is activated by a logical zero), MCLR has to be 
            connected via resistor to the positive supply pole. Resistor should 
            be between 5 and 10K. This kind of resistor whose function is to 
            keep a certain line on a logical one as a preventive, is called a 
            pull up.</font>
<p> </p></td>
<td width="403">
<p align="center"><img border="0" height="200" src="2_03chapter_files/2_11.gif" width="356"/></p></td></tr>
<tr>
<td width="350"></td>
<td width="403">
<p align="center"> </p></td></tr></tbody></table>
<p><font face="Verdana" size="2">Microcontroller PIC16F84 knows several 
      sources of resets:<br/><br/>a) Reset during power on, POR (Power-On 
      Reset)<br/>b) Reset during regular work by bringing logical zero to MCLR 
      microcontroller's pin.<br/>c) Reset during SLEEP regime<br/>d) Reset at 
      watchdog timer (WDT) overflow<br/>e) Reset during at WDT overflow during 
      SLEEP work regime.<br/><br/>The most important reset sources are a) and b). 
      The first one occurs each time a power supply is brought to the 
      microcontroller and serves to bring all registers to a starting position 
      initial state. The second one is a product of purposeful bringing in of a 
      logical zero to MCLR pin during normal operation of the microcontroller. 
      This second one is often used in program development. <br/><br/>During 
      a reset, RAM memory locations are not being reset. They are unknown during 
      a power up and are not changed at any reset. Unlike these, SFR registers 
      are reset to a starting position initial state. One of the most important 
      effects of a reset is setting a program counter (PC) to zero (0000h) , 
      which enables the program to start executing from the first written 
      instruction. <br/><br/></font><font face="Verdana" size="4">Reset at supply 
      voltage drop below the permissible (Brown-out Reset)</font> <font face="Verdana" size="2"><br/><br/>Impulse for resetting during voltage 
      voltage-up is generated by microcontroller itself when it detects an 
      increase in supply Vdd (in a range from 1.2V to 1.8V). That impulse lasts 
      72ms which is enough time for an oscillator to get stabilized. These 72ms 
      are provided by an internal PWRT timer which has its own RC oscillator. 
      Microcontroller is in a reset mode as long as PWRT is active. However, as 
      device is working, problem arises when supply doesn't drop to zero but 
      falls below the limit that guarantees microcontroller's proper 
      functioning. This is a likely case in practice, especially in industrial 
      environment where disturbances and instability of supply are an everyday 
      occurrence. To solve this problem we need to make sure that 
      microcontroller is in a reset state each time supply falls below the 
      approved limit. </font></p>
<p align="center"><img border="0" height="294" src="2_03chapter_files/2_12.gif" width="534"/></p>
<p><font face="Verdana" size="2">If, according to electrical specification, 
      internal reset circuit of a microcontroller can not satisfy the needs, 
      special electronic components can be used which are capable of generating 
      the desired reset signal. Beside this function, they can also function in 
      watching over supply voltage. If voltage drops below specified level, a 
      logical zero would appear on MCLR pin which holds the microcontroller in 
      reset state until voltage is not within limits that guarantee accurate 
      performance.</font></p>
<p> </p></td></tr></tbody></table></center></div>
<div align="center">
<center>
<table border="0" bordercolor="#111111" bordercolordark="#ffffff" bordercolorlight="#ffffff" cellpadding="0" cellspacing="0" height="18" id="AutoNumber14" style="BORDER-COLLAPSE: collapse" width="760">
<tbody>
<tr>
<td align="middle" background="2_03chapter_files/bg_title.gif" valign="top" width="25%"><b><font color="#ffffff" face="Verdana" size="2"><a href="2_02chapter.htm" style="TEXT-DECORATION: none"><font color="#ffffff">Previous page</font></a></font></b></td>
<td align="middle" background="2_03chapter_files/bg_title.gif" valign="top" width="50%"><font face="Verdana"><b><font color="#ffffff" size="2"><a href="picbook.htm" style="TEXT-DECORATION: none"><font color="#ffffff">Table of contents</font></a></font></b></font></td>
<td align="middle" background="2_03chapter_files/bg_title.gif" valign="top" width="25%"><b><font color="#ffffff" face="Verdana" size="2"><a href="2_04chapter.htm" style="TEXT-DECORATION: none"><font color="#ffffff">Next 
page</font></a></font></b></td></tr></tbody></table></center></div>
<div align="center">
<center>
<table border="0" bordercolor="#111111" bordercolordark="#ffffff" bordercolorlight="#ffffff" cellpadding="0" cellspacing="0" id="AutoNumber13" style="BORDER-COLLAPSE: collapse" width="760">
<tbody>
<tr>
<td width="100%"> </td>
</tr>
</tbody></table>
</center></div>
<script src="2_03chapter_files/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-2667377-1";
urchinTracker();
</script>
</body></head></html>
