<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<html><head><title>PIC microcontrollers : appendix C - Glossary</title>
<body bgcolor="#ffffff">
<div align="center">
<center>
<table background="C_appendix_files/grid.gif" border="0" bordercolor="#111111" cellpadding="4" cellspacing="0" style="BORDER-COLLAPSE: collapse" width="760">
<tbody>
<tr>
<td width="100%">
<p align="center"><font color="#ff0000" face="Arial Black" size="6"><b>Appendix 
      C</b></font></p>
<p align="center"><b><font color="#000000" face="Verdana" size="5">Glossary</font></b></p>
<p align="center"> </p>
<p><font face="Verdana" size="2"><a href="C_appendix.htm#Introduction">Introduction</a></font></p>
<ul>
<li><font face="Verdana" size="2"><a href="C_appendix.htm#Microcontroller">Microcontroller</a>
</font>
<li><font face="Verdana" size="2"><a href="C_appendix.htm#I/O pin">I/O 
        pin</a> </font>
<li><font face="Verdana" size="2"><a href="C_appendix.htm#Software">Software</a>
</font>
<li><font face="Verdana" size="2"><a href="C_appendix.htm#Hardware">Hardware</a>
</font>
<li><font face="Verdana" size="2"><a href="C_appendix.htm#Simulator">Simulator</a>
</font>
<li><font face="Verdana" size="2"><a href="C_appendix.htm#ICE">ICE</a>
</font>
<li><font face="Verdana" size="2"><a href="C_appendix.htm#EPROM Emulator">EPROM 
        Emulator</a> </font>
<li><font face="Verdana" size="2"><a href="C_appendix.htm#assembler">Assembler</a></font>
<li><font face="Verdana" size="2"><a href="C_appendix.htm#HEX file">HEX 
        file</a> </font>
<li><font face="Verdana" size="2"><a href="C_appendix.htm#List file">List 
        file</a> </font>
<li><font face="Verdana" size="2"><a href="C_appendix.htm#Source File">Source 
        File</a> </font>
<li><font face="Verdana" size="2"><a href="C_appendix.htm#Debugging">Debugging</a>
</font>
<li><font face="Verdana" size="2"><a href="C_appendix.htm#ROM, EPROM, EEPROM, FLASH, RAM">ROM, 
        EPROM, EEPROM, FLASH, RAM</a> </font>
<li><font face="Verdana" size="2"><a href="C_appendix.htm#Addressing">Addressing</a>
</font>
<li><font face="Verdana" size="2"><a href="C_appendix.htm#ASCII">ASCII</a>
</font>
<li><font face="Verdana" size="2"><a href="C_appendix.htm#Carry">Carry</a>
</font>
<li><font face="Verdana" size="2"><a href="C_appendix.htm#Code">Code</a>
</font>
<li><font face="Verdana" size="2"><a href="C_appendix.htm#Byte, Kilobyte, Megabyte">Byte, 
        Kilobyte, Megabyte</a> </font>
<li><font face="Verdana" size="2"><a href="C_appendix.htm#Flag">Flag</a>
</font>
<li><font face="Verdana" size="2"><a href="C_appendix.htm#Interrupt vector or interrupts">Interrupt 
        vector or interrupts</a> </font>
<li><font face="Verdana" size="2"><a href="C_appendix.htm#Programmer">Programmer</a>
</font>
<li><font face="Verdana" size="2"><a href="C_appendix.htm#Product">Product</a>
</font></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></ul>
<p> </p>
<p align="left"><font color="#000080" face="Verdana" size="4"><b><a name="Introduction">Introduction</a></b></font>
<p><font face="Verdana" size="2">Since all the fields of man's activity are 
      regularly based on adequate and already adopted terms (through which 
      other notions and definitions become), so in the field of microcontrollers 
      we can single out some frequently used terms. Ideas are often connected so 
      that correct understanding of one notion is needed in order to get 
      acquainted with one or more of the other ideas. <br/></font>
<p><font face="Verdana" size="2"><br/></font><a name="Microcontroller"><font face="Verdana" size="4">Microcontroller</font></a><font face="Verdana" size="2"><br/><br/>Microprocessor with peripherals in one electronic 
      component.<br/><br/></font><a name="I/O pin"><font face="Verdana" size="4">I/O 
      pin</font></a><font face="Verdana" size="2"><br/><br/>External microcontroller's 
      connector pin which can be configured as input or output. In most cases 
      I/O pin enables a microcontroller to communicate, control or read 
      information.<br/><br/></font><a name="Software"><font face="Verdana" size="4">Software</font></a><font face="Verdana" size="2"><br/><br/>Information 
      that microcontroller needs in order to be able to function. Software can 
      not have any errors if we want the program and a device to function 
      properly. Software can be written in different languages such as: Basic, 
      C, pascal or assembler. Physically, that is a file on computer 
      disc. <br/><br/></font><a name="Hardware"><font face="Verdana" size="4">Hardware</font></a><font face="Verdana" size="2"><br/><br/>Microcontroller, memory, supply, signal circuits and all 
      components connected with microcontroller.<br/>The other way of viewing 
      this (especially if it's not working) is, that, hardware is something you 
      can kick.<br/><br/></font><a name="Simulator"><font face="Verdana" size="4">Simulator</font></a><font face="Verdana" size="2"><br/><br/>Software 
      package for PC which simulates the internal function of microcontroller. 
      It is ideal for checking software routines and all the parts of the code 
      which do not have over demanding connections with an outside world. 
      Options are installed to watch the code, movement around the program back 
      and forth step by step, and debugging. <br/><br/></font><a name="ICE"><font face="Verdana" size="4">ICE</font></a><font face="Verdana" size="2"><br/><br/>ICE (In Circuit Emulator), internal emulator, very useful 
      part of the equipment which connects a PC instead of microcontroller on a 
      device that is being developed. It enables software to function on the PC 
      computer, but to appear as if a real microcontroller exists in the device. 
      ICE enables you to move through program in real time, to see what is going 
      on in the microcontroller and how it communicates with an outside 
      world. <br/><br/></font><a name="EPROM Emulator"><font face="Verdana" size="4">EPROM Emulator</font></a><font face="Verdana" size="2"><br/><br/>EPROM 
      Emulator is a device which does not emulate the entire microcontroller 
      like ICE emulator, but it only emulates its memory. It is mostly used in 
      microcontrollers that have external memory. By using it we avoid constant 
      erasing and writing of EPROM memory. <br/></font><a href="C_appendix.htm#assembler" name="assembler"><font color="#000000" face="Verdana" size="4">Assembler</font></a><font face="Verdana" size="2"><br/><br/>Software 
      package which translates source code into a code which microcontroller can 
      understand. It contains a section for discovering errors. This part is 
      used when we debug a program from errors made when program was 
      written. <br/><br/></font><a name="HEX file"><font face="Verdana" size="4">HEX file</font></a><font face="Verdana" size="2"><br/><br/>This is a file 
      made by assembler translator when translating a source file, and has a 
      form "understood" by microcontrollers. A continuation of the file is 
      usually File_name.HEX where the name HEX file comes from.<br/><br/></font><a name="List file"><font face="Verdana" size="4">List file</font></a><font face="Verdana" size="2"><br/><br/>This is a file made by assembler translator 
      and it contains all instructions from source file with addresses and 
      comments programmer has written. This is a very useful file for keeping 
      track of errors in the program. File extension is LST which is where its 
      name comes from.<br/><br/></font><a name="Source File"><font face="Verdana" size="4">Source File</font></a><font face="Verdana" size="2"><br/><br/>File 
      written in the language understood by man and assembler translator. By 
      translating the source file, we get HEX and LIST 
      files. <br/><br/></font><a name="Debugging"><font face="Verdana" size="4">Debugging</font></a><font face="Verdana" size="2"><br/><br/>Error made in 
      writing a program, which error we are not aware of. Errors can be quite 
      simple such as typing errors, and quite complex such as incorrect use of 
      program language. Assembler will find most of these errors and report them 
      to '.LST' file. Other errors will need to be searched for by trying it out 
      and watching how device functions. <br/><br/></font><a name="ROM, EPROM, EEPROM, FLASH, RAM"><font face="Verdana" size="4">ROM, 
      EPROM, EEPROM, FLASH, RAM</font></a><font face="Verdana" size="2"><br/><br/>Types of memories we meet with microcontroller use. First 
      one can not be erased, what you write in it once, stays forever, and can 
      not be erased. The second is erasable with UV lamp. Third one can be 
      erased electrically, using voltage which microcontroller operates on. 
      Fourth one is electrically erasable, but unlike EEPROM memory it does not 
      have such a great number of cycles of writing and erasing at memory 
      locations. Fifth one is fast, but it does not hold back the contents as 
      the previous when there is supply shortage. Thus, program is not stored in 
      it, but it serves for different variables and 
      inter-results. <br/><br/></font><a name="Addressing"><font face="Verdana" size="4">Addressing</font></a><font face="Verdana" size="2"><br/><br/>Determines 
      and designates certain memory locations.<br/><br/></font><a name="ASCII"><font face="Verdana" size="4">ASCII</font></a><font face="Verdana" size="2"><br/><br/>Short for "American Standard Code for Information 
      Interchange". It is widely accepted type of coding where each number and 
      letter have their eight-bit code. <br/><br/></font><a name="Carry"><font face="Verdana" size="4">Carry</font></a><font face="Verdana" size="2"><br/><br/>Transfer bit connected with arithmetic 
      operations<br/><br/></font><a name="Code"><font face="Verdana" size="4">Code</font></a><font face="Verdana" size="2"><br/><br/>File, or section 
      of a file which contains program instructions. <br/><br/></font><font face="Verdana" size="4"><a name="Byte, Kilobyte, Megabyte">Byte, Kilobyte, 
      Megabyte</a></font><font face="Verdana" size="2"><br/><br/>Terms designating 
      amounts of information. The basic unit is a byte, and it has 8 bits. 
      Kilobyte has 1024 bytes, and mega byte has 1024 
      kilobytes. <br/><br/></font><a name="Flag"><font face="Verdana" size="4">Flag</font></a><font face="Verdana" size="2"><br/><br/>Bits from a status 
      register. By their activation, programmer is informed about certain 
      actions. Program activates its response if 
      necessary. <br/><br/></font><a name="Interrupt vector or interrupts"><font face="Verdana" size="4">Interrupt 
      vector or interrupts</font></a><font face="Verdana" size="2"><br/><br/>Location 
      in microcontroller memory. Microcontroller takes from this location 
      information about a section of the program that is to be executed as an 
      answer to some event of interest to programmer and 
      device.<br/><br/></font><a name="Programmer"><font face="Verdana" size="4">Programmer</font></a><font face="Verdana" size="2"><br/><br/>Device which 
      makes it possible to write software in microcontroller memory, thus 
      enabling the microcontroller to work independently. It consists of the 
      hardware section usually connected with one of the ports and software 
      section used on the computer as a program. <br/><br/></font><a name="Product"><font face="Verdana" size="4">Product</font></a><font face="Verdana" size="2"><br/><br/>Product development is a combination of luck 
      and experience. Short terms, or time-limits for production should be 
      avoided because even with most simple assignments, much time is needed to 
      develop and improve. When creating a project, we need time, quiet, logical 
      mind and most importantly, a thorough understanding of consumer's needs. 
      Typical course in creating a product would have the following 
      algorithm.<br/></font>
<p align="center"><font face="Verdana" size="2"><br/><img border="0" height="496" src="C_appendix_files/01.gif" width="374"/> </font>
<p align="center"> </p></p></p></p></p></td></tr></tbody></table></center></div>
<div align="center">
<center>
<table border="0" bordercolor="#111111" bordercolordark="#ffffff" bordercolorlight="#ffffff" cellpadding="0" cellspacing="0" height="18" id="AutoNumber94" style="BORDER-COLLAPSE: collapse" width="760">
<tbody>
<tr>
<td align="middle" background="C_appendix_files/bg_title.gif" valign="top" width="25%"><b><font color="#ffffff" face="Verdana" size="2"><a href="B_appendix.htm" style="TEXT-DECORATION: none"><font color="#ffffff">Previous page</font></a></font></b></td>
<td align="middle" background="C_appendix_files/bg_title.gif" valign="top" width="50%"><font face="Verdana"><b><font color="#ffffff" size="2"><a href="picbook.htm" style="TEXT-DECORATION: none"><font color="#ffffff">Table of contents</font></a></font></b></font></td>
<td align="middle" background="C_appendix_files/bg_title.gif" valign="top" width="25%"><b><font color="#ffffff" face="Verdana" size="2"><a href="picbook.htm" style="TEXT-DECORATION: none"><font color="#ffffff">Next 
page</font></a></font></b></td></tr></tbody></table></center></div>
<div align="center">
<center>
</center></div>
<script src="C_appendix_files/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-2667377-1";
urchinTracker();
</script>
</body></head></html>
