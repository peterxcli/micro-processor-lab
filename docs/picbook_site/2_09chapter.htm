<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<html><head><title>PIC microcontrollers : chapter 2 - Microcontroller PIC16F84</title>
<body bgcolor="#ffffff">
<div align="center">
<center>
<table background="2_09chapter_files/grid.gif" border="0" bordercolor="#111111" cellpadding="4" cellspacing="0" style="BORDER-COLLAPSE: collapse" width="760">
<tbody>
<tr>
<td width="100%">
<p align="center"><font color="#000080" face="Verdana" size="4"><b>2.8 EEPROM Data 
      memory</b></font></p>
<p><font face="Verdana" size="2">PIC16F84 has 64 bytes of EEPROM memory 
      locations on addresses from 00h to 63h that can be written to or read 
      from. The most important characteristic of this memory is that it does not 
      lose its contents with the loss of power supply. Data can be retained in 
      EEPROM without power supply for up to 40 years (as manufacturer of 
      PIC16F84 microcontroller states), and up to 1 million cycles of writing 
      can be executed. <br/><br/>In practice, EEPROM memory is used for 
      storing important data or process parameters.<br/>One such parameter is a 
      given temperature, assigned when setting up a temperature regulator to 
      some process. If that  data wasn't retained, it would be necessary to 
      adjust a given temperature after each loss of supply. Since this is very 
      impractical (and even dangerous), manufacturers of microcontrollers have 
      began installing one smaller type of EEPROM memory.<br/><br/>EEPROM memory 
      is placed in a special memory space and can be accessed through special 
      registers. These registers are:</font></p>
<div align="center">
<center>
<table border="0" bordercolor="#ffffff" cellpadding="2" id="AutoNumber40" style="BORDER-COLLAPSE: collapse" width="555">
<tbody>
<tr>
<td valign="top" width="74"><font face="Verdana" size="2"><b>EEDATA</b></font></td>
<td valign="top" width="396"><font face="Verdana" size="2">Holds read data 
            or that  to be written.</font></td></tr>
<tr>
<td valign="top" width="74"><font face="Verdana" size="2"><b>EEADR</b></font></td>
<td valign="top" width="396"><font face="Verdana" size="2">Contains an 
            address of EEPROM location being accessed.</font></td></tr>
<tr>
<td valign="top" width="74"><font face="Verdana" size="2"><b>EECON1</b></font></td>
<td valign="top" width="396"><font face="Verdana" size="2">Contains control 
            bits.</font></td></tr>
<tr>
<td valign="top" width="74"><font face="Verdana" size="2"><b>EECON2</b></font></td>
<td valign="top" width="396"><font face="Verdana" size="2">This register 
            does not exist physically and serves to protect EEPROM from 
            accidental writing.</font></td></tr></tbody></table></center></div>
<p><font face="Verdana" size="2">EECON1 register is a control register with 
      five implemented bits. Bits 5, 6 and 7 are not used, and by reading always 
      are zero. Interpretation of EECON1 register bits 
      follows.<br/><br/></font><font face="Verdana" size="4">EECON1 Register</font>
</p>
<p align="center"><font face="Verdana" size="2"><img border="0" height="104" src="2_09chapter_files/2_32.gif" width="474"/> </font></p>
<p><font face="Verdana" size="2">bit 4 <b>EEIF</b> (<i>EEPROM Write Operation 
      Interrupt Flag bit</i>) Bit used to inform that writing data to EEPROM has 
      ended.<br/>When writing has terminated, this bit would be set 
      automatically. Programmer must clear EEIF bit in his program in order to 
      detect new termination of writing. <br/>1 = writing terminated<br/>0 = 
      writing not terminated yet, or has not started</font></p>
<p><font face="Verdana" size="2">bit 3 <b>WRERR</b> (<i>Write EEPROM Error 
      Flag</i>) Error during writing to EEPROM<br/>This bit was set only in cases 
      when writing to EEPROM had been  interrupted by a reset signal or by 
      running out of time in watchdog timer (if activated).<br/>1 = error 
      occurred<br/>0 = error did not occur</font></p>
<p><font face="Verdana" size="2">bit 2 <b>WREN</b> (<i>EEPROM Write Enable 
      bit</i>) Enables writing to EEPROM<br/>If this bit was not set, 
      microcontroller would not allow writing to EEPROM.<br/>1 = writing 
      allowed<br/>0 = writing disallowed</font></p>
<p><font face="Verdana" size="2">bit 1 <b>WR</b> (<i>Write Control 
      bit</i>) <br/>Setting of this bit initializes writing data from EEDATA 
      register to the address specified trough EEADR register. <br/>1 = 
      initializes writing<br/>0 = does not initialize writing</font></p>
<p><font face="Verdana" size="2">bit 0 <b>RD</b> (<i>Read Control 
      bit</i>)<br/>Setting this bit initializes transfer of data from address 
      defined in EEADR to EEDATA register. Since time is not as essential in 
      reading data as in writing, data from EEDATA can already be used further 
      in the next instruction.<br/>1 = initializes reading<br/>0 = does not 
      initialize reading<br/><br/><br/></font><font face="Verdana" size="4">Reading 
      from EEPROM Memory</font> <font face="Verdana" size="2"><br/><br/>Setting the RD 
      bit initializes transfer of data from address found in EEADR register to 
      EEDATA register. As in reading data we don't need so much time as in 
      writing, data taken over from EEDATA register can already be used further 
      in the next instruction. <br/><br/>Sample of the part of a program 
      which reads data in EEPROM, could look something like the following: 
      </font></p>
<p align="center"><img border="0" height="117" src="2_09chapter_files/2_32a.gif" width="456"/></p>
<p><font face="Verdana" size="2">After the last program instruction, contents 
      from an EEPROM address zero can be found in working register 
      w. <br/><br/></font><font face="Verdana" size="4">Writing to EEPROM 
      Memory</font> <font face="Verdana" size="2"><br/><br/>In order to write data to 
      EEPROM location, programmer must first write address to EEADR register and 
      data to EEDATA register. Only then is it useful to set WR bit which sets 
      the whole action in motion. WR bit will be reset, and EEIF bit set 
      following a writing what may be used in processing interrupts. Values 55h 
      and AAh are the first and the second key whose disallow for accidental 
      writing to EEPROM to occur. These two values are written to EECON2 which 
      serves only that purpose, to receive these two values and thus prevent any 
      accidental writing to EEPROM memory. Program lines marked as 1, 2, 3, and 
      4 must be executed in that order in even time intervals. Therefore, it is 
      very important to turn off interrupts which could change the timing needed 
      for executing instructions. After writing, interrupts can be enabled again 
      .<br/><br/>Example of the part of a program which writes data 0xEE to first 
      location in EEPROM memory could look something like the following: 
      </font></p>
<p><img border="0" height="268" src="2_09chapter_files/2_32b.gif" width="507"/></p>
<table border="0" cellpadding="0" cellspacing="0" width="755">
<tbody>
<tr>
<td valign="top" width="50">
<p align="center"><img border="0" height="64" src="2_09chapter_files/Ideja.gif" width="21"/></p></td>
<td width="705"><font face="Verdana" size="2"><i>It is recommended that 
            WREN be turned off the whole time except when writing data to 
            EEPROM, so that possibility of accidental writing would be 
            minimal. <br/>All writing to EEPROM will automatically clear a 
            location prior to writing a new!</i></font>
<p> </p></td></tr></tbody></table></td></tr></tbody></table></center></div>
<div align="center">
<center>
<table border="0" bordercolor="#111111" bordercolordark="#ffffff" bordercolorlight="#ffffff" cellpadding="0" cellspacing="0" height="18" id="AutoNumber39" style="BORDER-COLLAPSE: collapse" width="760">
<tbody>
<tr>
<td align="middle" background="2_09chapter_files/bg_title.gif" valign="top" width="25%"><b><font color="#ffffff" face="Verdana" size="2"><a href="2_08chapter.htm" style="TEXT-DECORATION: none"><font color="#ffffff">Previous page</font></a></font></b></td>
<td align="middle" background="2_09chapter_files/bg_title.gif" valign="top" width="50%"><font face="Verdana"><b><font color="#ffffff" size="2"><a href="picbook.htm" style="TEXT-DECORATION: none"><font color="#ffffff">Table of contents</font></a></font></b></font></td>
<td align="middle" background="2_09chapter_files/bg_title.gif" valign="top" width="25%"><b><font color="#ffffff" face="Verdana" size="2"><a href="3_chapter.htm" style="TEXT-DECORATION: none"><font color="#ffffff">Next 
page</font></a></font></b></td></tr></tbody></table></center></div>
<div align="center">
<center>
</center></div>
<script src="2_09chapter_files/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-2667377-1";
urchinTracker();
</script>
</body></head></html>
